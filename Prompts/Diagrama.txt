Show ðŸ‘Œ entÃ£o aqui vai uma visÃ£o de **arquitetura modular** para a biblioteca, com o nÃºcleo em **Rust** e bindings para vÃ¡rias linguagens:

---

# ðŸ“Œ Arquitetura â€“ Biblioteca Universal de CÃ³digos de Barras

```
+-----------------------------------------------------------+
|                  Camadas de AplicaÃ§Ã£o                     |
|-----------------------------------------------------------|
|  Python API   |   Node.js / WASM API   |   Go/.NET (futuro)|
|   (PyO3)      |   (wasm-bindgen)       |   (FFI wrappers)  |
+-----------------------------------------------------------+

+-----------------------------------------------------------+
|                  NÃºcleo da Biblioteca (Rust)              |
|-----------------------------------------------------------|
|   MÃ³dulo GeraÃ§Ã£o        |   MÃ³dulo Leitura                |
|-------------------------|---------------------------------|
| - EAN-13                | - EAN-13                       |
| - UPC-A                 | - UPC-A                        |
| - Code128               | - Code128                      |
| - QR Code               | - QR Code                      |
| - DataMatrix (fase 2)   | - DataMatrix                   |
| - PDF417 (fase 2)       | - PDF417                       |
| - Aztec (fase 2)        | - Aztec                        |
| - Code39, ITF-14        | - Code39, ITF-14 (fase 3)      |
|-------------------------|---------------------------------|
|  SaÃ­da: PNG, SVG, PDF   | Entrada: Imagem, CÃ¢mera (WASM) |
+-----------------------------------------------------------+

+-----------------------------------------------------------+
|                  UtilitÃ¡rios Comuns                       |
|-----------------------------------------------------------|
| - RenderizaÃ§Ã£o grÃ¡fica (SVG, Canvas, PDF)                 |
| - Algoritmos de checksum (EAN, UPC)                       |
| - OtimizaÃ§Ã£o de performance (SIMD, threads)               |
| - Interface plugin para novos formatos                    |
+-----------------------------------------------------------+
```

---

## ðŸ”¹ **Fluxo de Uso**

1. O usuÃ¡rio escolhe linguagem (Python, JS, etc).
2. A chamada vai para um **wrapper/binding**.
3. Esse binding invoca o **nÃºcleo Rust** via FFI (Foreign Function Interface).
4. O nÃºcleo:

   * Se for **geraÃ§Ã£o** â†’ cria a imagem (SVG/PNG/PDF).
   * Se for **leitura** â†’ processa a imagem (ou cÃ¢mera, via WASM) e retorna os dados decodificados.

---

## ðŸ”¹ **BenefÃ­cios dessa arquitetura**

* **Rust no core** â†’ seguranÃ§a, performance, multiplataforma.
* **Bindings leves** â†’ permite usar em Python, Node.js, atÃ© Go e .NET no futuro.
* **WebAssembly** â†’ leitura e geraÃ§Ã£o no navegador, sem depender de servidor.
* **Extensibilidade** â†’ novos padrÃµes podem ser adicionados sem quebrar APIs.

---

ðŸ‘‰ Exemplo de API em Python:

```python
from barcodegen import generate, read

# Gerar QR Code
generate("QR", "pix:123456", output="pix.svg")

# Ler um cÃ³digo de barras de imagem
data = read("foto_produto.png")
print(data)  # -> "7891234567890"
```

ðŸ‘‰ Exemplo em JS (browser com WASM):

```javascript
import { generate, read } from "barcodegen-wasm";

// Gerar um EAN-13
let svg = generate("EAN13", "7891234567890");

// Ler de uma webcam
let result = await read(videoStream);
console.log(result);
```

---

ðŸ’¡ Esse tipo de arquitetura modular Ã© o que faz libs como **Tesseract (OCR)** ou **ZXing** serem referÃªncia global â†’ **core rÃ¡pido + bindings para todo lado**.

---
